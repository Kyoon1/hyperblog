Mis apuntes de los comandos . junto con su descripción de esta clase

$ git init //inicializar el repositorio
$ git add nombre_de_archivo.extensión //Agregar el archivo al repositorio
$ git commit -m “Mensaje”// Agregamos los cambios para el repositorio
$ git add .// Agregar los cambios de la carpeta en la que nos encontramos agregar todo
$ git status // visualizar cambios
$ git log nombre_de_archivos.extensión //histórico de cambios con detalles
$ git push // Envía a otro repositorio remoto lo que estamos haciendo
$ git pull // traer repositorio remoto
$ ls // Listado de carpetas en donde me encuentro es decir dir en windows
$ pwd // Ubicación actual
$ mkdir // make directory nueva carpeta
$ touch archivo.extensión// Crear archivo vacío
**$ cat archivo.extensión// **Muestra el contenido del archivo
$ history // Historial de comandos utilizados durante esa sesión
$ rm archivo.extensión // Eliminación de archivo
$ comando --help // Ayuda sobre el comando
**$ checkout // **Traer cambios realizado
$ git rm --cached archivo.extensión// Se usa para devolver el archivo que se tiene en ram cuando escribimos git add lo devuelve a estado natural mientra esta en staging
$ git config --list // Muestra la lista de configuración de git
$ git config --list --show-origin// Rutas de acceso a la configuración de git
$ git log archivo.extensión // Muestra la historia del archivo
Git rm: Remover/Eliminar

Git rm --cached: Elimina los archivos que están en staging (caché) pero los deja en tu carpeta (disco duro).
Git rm --force: Elimina el archivo de git y de tu carpeta (disco duro).
_Los archivos se pueden recuperar pero con comando avanzados.
Git reset: Ir a archivos pasados.

Git resert --hard: Borra todo, del área de staging, commits e historial.
Git reset --soft: Borra el historial y los registros pero mantiene los cambios agregado a staging.
Git reset HEAD: Imagina que hiciste git add a dos archivos, un HTML y otro CSS. Sin embargo, te diste cuenta que no agregaste los estilos correctamente porque los titulos son rojos. Haces git reset HEAD, tu archivo se quita de staging, vuelve a tu carpeta, modificas el archivo css y vuelves a hacer git add. Si hubieses usado git rm tu archivo se hubiese eliminado.
Diferencias:
git rm solo elimina archivos (ya sea de staging o del disco duro).
git reset te envía a versiones antiguas y elimina archivos, historial y registros.
git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

git checkout –b // creará una nueva rama y saltará a ella de forma inmediata

git branch --list // listará las ramas existentes

git branch --delete [nombreRama] // borrará la rama que se indique

git branch –D [nombreRama] // fuerza la eliminación de ramas que aún no han sido fusionadas

git branch –v // muestra el último commit de cada rama

git branch --merged // lista las ramas que se fusionaron con la rama actual

git branch --no-merged // lista las ramas que no se han fusionado con la rama actual

git merge --abort // anula el merge y devuelve todo a como estaba antes

Primer paso: Generar tus llaves SSH. Recuerda que es muy buena idea proteger tu llave privada con una contraseña.

ssh-keygen -t rsa -b 4096 -C "tu@email.com"
Segundo paso: Terminar de configurar nuestro sistema.

En Windows y Linux:

# Encender el "servidor" de llaves SSH de tu computadora:
eval $(ssh-agent -s)



# Añadir tu llave SSH a este "servidor":
ssh-add ruta-donde-guardaste-tu-llave-privada
ssh-add ~/.shh/id_rsa

Crear una rama en el repositorio local: git branch nombre-de-la-rama o git checkout -b nombre-de-la-rama.
Publicar una rama local al repositorio remoto: git push origin nombre-de-la-rama.