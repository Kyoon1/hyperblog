Errores en el código
Cuando python nos avisa que tenemos un error en el código nos avienta un mensaje que conocemos como traceback, puesde ser debido a:
--------------------------------------------------
Errores de Sintaxis (SyntaxError) → escribimos mal alguna palabra clave (typo), el programa no se ejecuta.
Excepciones (Exeption) → Producen un colapso o interrupción de la lógica del programa en alguna línea en específico por ejemplo (todas las líneas anteriores se ejecutan), pueden ser de varios tipos, generalmente aparecen cuando no existe un componente clave en la ejecución o hay alguna imposibilidad lógica (matemática) para efectuar la instrucción, tambipen pueden generarse dentro del código o fuera de el (elevar una excepción)
Lectura de un traceback
------------------------------------------------------------
La manera correcta de leer un traceback es iniciar por el final, en el caso de un error de sintaxis nos indicará en qué línea se encuentra dicho error.
En el caso de excepciones la última línea nos indicará el tipo de exepcion que se generó (generalmente son autoexplicativas pero si no entienedes que paso puedes buscar este error)
La penúltima línea nos indicará dende se encuentra el error (archivo y línea)
La antepenúltima línea nos muestra “most recent call last” lo que significa que la llamada más reciente es la última (el programa se cerró después de esa llamada, se genero un error)
Elevar una excepción
.----------------------------------------------------------------------------
Cuando tenemos una excepción en python lo que sucede es que se crea un objeto de tipo exception que se va moviendo a través de los bloques de código hasta llegar al bloque principal si es que no se maneja dicha excepción en algún bloque intermedio el programa se interrumpe y genera el traceback

--------------------------------EJEMPLO-------------------------------------

Hice un par de imágenes para mostrar cómo funciona el levantamiento de excepciones en Python, cuando estas no son controladas. El código es el siguiente:

def run():
    function1()


def function1():
    function2()


def function2():
    function3()


def function3():
    exception_code = 1 / 0
    

if __name__ == '__main__':
    
    run()

1 Traceback (most recent call last):
  File "exception_traceback.py", line 19, in <module>
   run()
  File "exception_traceback.py", line 2, in run
   function1()
 File "exception_traceback.py", line 6, in function1
   function2()
  File "except ion_traceback.py", line 10, in function2
   function3( )
 File "exception_traceback.py", line 14, in function3
   exception_code = 1 / 0
12 ZeroDivisionError: division by zero

En este caso la excepción se generará en function3.
Así se ve el traceback que se genera en la consola al correr el código anterior:

exceptions_raise_traceback.png
Como enseña Facundo, si empezamos a leer el traceback de abajo hacia arriba nos podemos dar cuenta que efectivamente la excepción se genera en function3. Si seguimos leyendo el traceback hacia arriba nos daremos cuenta que después de menciona a function2, posteriormente a function1 y finalmente a run.

Así que si quisiéramos ver gráficamente como se elevan las excepciones, sería algo así:

1 def run():----------------------------------------------
   function1(). 2
3
4
5 def functionl1( ):
   function2()
7
8
9 def function2( ):
10 function3( )
11
12
13 def function3( ):
14 exception_code = 1 / 0 --------------------
                            Aquí se genera la 
                            excepción
15			  ---------------------
16
17 if name '_main_':
  --
18
19 run() <------------------------------------------------
                                         La
                                         excepción----------
                                         se
                                         eleva

